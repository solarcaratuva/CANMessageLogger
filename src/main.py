import argparse
from backend.db_connection import DbConnection
from backend.sockio.socket import socketio, app
from backend.input import consumer, logfile_producer
from functools import partial
from backend.sockio import debug


def main():
    database_path = "./can_database.sqlite"
    datafile_path = None

    parser = cli_message_reader()

    args = parser.parse_args()

    if args.inputFile:
        datafile_path = args.inputFile[0]

    if args.outputDB:
        database_path = args.outputDB[0]

    # need to call .set_up_tables and .setup_database_path here!! (before running threads)
    DbConnection.setup_the_db_path(database_path)

    dbconn = DbConnection()
    dbconn.setup_the_tables()

    match args.logType:
        case "past_log":
            if not args.inputFile:
                parser.error("The '--inputFile' option is required when 'past_log' is provided.")
            if not args.inputFile[0].endswith(".txt"):
                parser.error("Need to specify a .txt file")

            logfile_producer.process_logfile(datafile_path)
            consumer.process_data()

        case "livelog":
            pass
            # NOT IMPLEMENTED YET

        case "mock_livelog":
            if not args.inputFile:
                parser.error("The '--inputFile' option is required when 'mock_livelog' is provided.")
            if not args.inputFile[0].endswith(".txt"):
                parser.error("Need to specify a .txt file")

            socketio.start_background_task(target=consumer.process_data_live)
            socketio.start_background_task(target=partial(logfile_producer.process_logfile_live, datafile_path))

        case "db":
            if not args.inputFile:
                parser.error("The '--inputFile' option is required when 'db' is provided.")
            if not (args.inputFile[0].endswith(".db")) and not (args.inputFile[0].endswith(".sqlite")):
                parser.error("Need to specify a .db or .sqlite file")

            database_path = args.inputFile[0]

    socketio.run(app, debug=True, allow_unsafe_werkzeug=True)  # to run the sockio io app, .run is blocking! No code below this


def cli_message_reader():
    datatype_choices =["past_log", "livelog", "mock_livelog", "db"]

    parser = argparse.ArgumentParser() # not quite sure how to set this in app.py
    parser.add_argument("logType", choices=datatype_choices, type=str,
                        help=f"The type of database connection you wish to establish. Input must be one of:"
                             f" {', '.join(datatype_choices)}")
    parser.add_argument("--inputFile", type=str, nargs=1,
                        help="specifies path of input file, must be followed by logfile path")
    parser.add_argument("--outputDB", type=str, nargs=1, default=None,
                        help="specifies the name of the output DB, name is autogenerated if not specified")
    # parser.add_argument("--set_dbc_branch", type=str,
    #                    help="sets the branch of the DBC files submodule")

    return parser


if __name__ == "__main__":
    main()

